local live_gamepads = {}

local function spawn_player(self, gamepad_id)
	local props = {}
	props[hash("/player")] = {gamepad_id = gamepad_id}
	local player_id = collectionfactory.create("/controller#player_factory", vmath.vector3(500 + 300*gamepad_id,500,0), vmath.quat(), props)
	live_gamepads[gamepad_id] = player_id["/player"]
	go.set(msg.url(nil, player_id["/player"], "gamepad-input"), "gamepad_id", gamepad_id)
	go.set(msg.url(nil, player_id["/player"], "gamepad-input"), "weapon_local_id", player_id[hash("/weapon_local")])
end

function init(self)
	msg.post(".", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
	pprint("LEVEL on_message")
	pprint(message_id)
	if message_id == hash("live_gamepads") then
		live_gamepads = message.live_gamepads
		pprint("LEVEL")
		pprint(live_gamepads)
		for gamepad_id, _ in pairs(live_gamepads) do
			pprint("spawning player, gamepad_id: ", gamepad_id)
			spawn_player(self, gamepad_id)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("KEY_ENTER") and action.pressed then
		spawn_player(self, 0)
	elseif action_id == hash("MB_LEFT") and action.pressed then
		-- drop grenade and light fuse
		pprint(action)
		local id = factory.create("debug#grenade_factory", vmath.vector3(action.x*2, action.y*2, 0.1), go.get_rotation(), {id = hash("grenade")})

		local pickup_coll_url = msg.url(id)
		pickup_coll_url.fragment = "collisionobject" -- another player should be able to pick up the grenade and throw it back?
		msg.post(pickup_coll_url, "enable")

		local grenade_coll_url = msg.url(id)
		grenade_coll_url.fragment = "collisionobject_grenade"
		msg.post(grenade_coll_url, "enable")

		msg.post(id, "tossed", {angle = vmath.vector3(0)})
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
