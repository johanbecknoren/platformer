go.property("velocity", vmath.vector3(0,0,0))
go.property("angular_velocity", 0)

function init(self)
	timer.delay(2, false, function(self) go.delete() end)
	pprint(self.velocity)
	pprint(self.angular_velocity)
end

function update(self, dt)

	local pos = go.get_position()

	-- update position (gravity etc.)
	self.velocity.y = self.velocity.y + (4 * (-(9.82)))
	pos.y = pos.y + self.velocity.y * dt
	go.set_position(pos)

	local rot = go.get_rotation()
	go.set_rotation(rot * vmath.quat_rotation_z(self.angular_velocity * dt))
end

function on_message(self, message_id, message)
	if message_id == hash("contact_point_response") then
		local newpos = go.get_position() + message.normal * message.distance
		self.velocity.x = self.velocity.x - self.velocity.x * math.abs(message.normal.x)
		self.velocity.y =  -0.3 * self.velocity.y * math.abs(message.normal.y)
		self.velocity.z = self.velocity.z - self.velocity.z * math.abs(message.normal.z)
		go.set_position(newpos)
	end
end