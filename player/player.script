local gamepads = require("input.gamepads")
local rendercam = require "rendercam.rendercam"
local common = require("main.common")

local BULLET_OFFSET = vmath.vector3(0, 100, 0)

go.property("health", 100)
go.property("crosshair_speed", 5000)
go.property("player_speed", 700)
go.property("player_jump_speed", 1500)
go.property("velocity", vmath.vector3(0,0,0))
go.property("gamepad_id", 0)

local function spawn_bullet(angle, properties)
	factory.create("/controller#bullet_factory", go.get_world_position("weapon") + vmath.rotate(angle, BULLET_OFFSET), angle, properties, 0.2)
end

local function spawn_shell()
	local vel = vmath.vector3(math.random()*200-100, 1000, 0)
	factory.create("/controller#shell_factory", go.get_world_position(), vmath.quat(), {velocity = vel, angular_velocity = 10}, 0.15)
	--msg.post("/game", "spawn_shell", { position = go.get_world_position() })
end

local WEAPONS = {
	{
		name = "KSP-90",
		anim = "m249",
		scale = 0.5,
		bullets_per_second = 10,
		magazine_size = 2000,
		spread = 2,
		reload_time = 1.5,
		move_and_fire = true,
		fire_bullet = function(self, angle)
			local rot = go.get_rotation()
			go.animate("weapon_local", "position.x", go.PLAYBACK_ONCE_PINGPONG, -20, go.EASING_LINEAR, 1 / 10) -- recoil
			spawn_bullet(angle, { speed = 2000, type = BULLET, damage = 10, distance = rendercam.window.x*rendercam.get_ortho_scale() })
			spawn_shell()
			--sounds.fire_bullet()
		end
	},
	{
		name = "HE-grenade",
		anim = "grenade",
		scale = 0.5,
		bullets_per_second = 10,
		magazine_size = 1,
		spread = 0,
		reload_time = 1.5,
		move_and_fire = true,
		fire_bullet = function(self, angle)
			local rot = go.get_rotation()
			spawn_bullet(angle, { speed = 2000, type = BULLET, damage = 10, distance = rendercam.window.x*rendercam.get_ortho_scale() })
			--sounds.fire_bullet()
		end
	},
}

local function change_weapon(self, index)
	self.weapon = WEAPONS[index]
	self.weapon_angle = vmath.quat()
	self.bullets_left = self.weapon.magazine_size
	self.magazines = 5
	self.bullet_interval = 1 / self.weapon.bullets_per_second
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.bullets_fired_in_burts = 0
	--update_weapon_text(self)
end

local function player_dead(self)
	pprint("DEAD!")
	self.dead = true
	msg.post("tombstone", "enable")
	msg.post("player#collisionobject_tombstone", "enable")
	
	msg.post("weapon", "disable")
	msg.post("weapon_local", "disable")
	msg.post("crosshair", "disable")
	--msg.post("player", "disable") -- can't disable go owning this script, still want messages etc.
	msg.post("player#sprite", "disable")
	msg.post("player#collisionobject", "disable")
end

local function take_damage(self, damage)
	if self.health > 0 then
		self.health = math.max(0, self.health - damage)
		label.set_text("#label", "Health: " .. self.health)
		if self.health == 0 then
			player_dead(self)
			--input.release()
			--msg.post("lasersight", "disable")
			--broadcast.send("player_dead")
		else
			--explosions.small(go.get_world_position())
		end
	end
end

local function init_gp(self)
	self.gp = gamepads.init_gamepad()
end

function init(self)
	msg.post(".", "acquire_input_focus")
	print("PLAYER INIT! gp id: " .. tostring(self.gamepad_id))

	math.randomseed(socket.gettime())

	self.gp = {}
	self.is_jumping = false
	self.dead = false
	self.correction_physics = vmath.vector3(0)
	self.weapon_angle = vmath.quat_rotation_z(0)
	self.anim_playing = "idle"
	self.weapon_flipped = false
	self.tombstone_skip = false
	change_weapon(self, 1)

	init_gp(self)

	msg.post("tombstone", "disable")
	msg.post("player#collisionobject_tombstone", "disable")
	go.set("#sprite", "scale", vmath.vector3(1.3))
	go.set("crosshair#sprite", "tint", common.cross_tints[self.gamepad_id + 1])
end

local function set_anim(self, anim)
	if self.anim_playing == anim then
		return
	end
	self.anim_playing = anim
	local left = go.get_position("crosshair").x < 0
	sprite.play_flipbook("#sprite", anim .. "_left")
end

function update(self, dt)
	self.correction_physics = vmath.vector3(0)
	
	local pos_player = go.get_position()
	
	-- update position (gravity etc.)
	self.velocity.y = self.velocity.y + (4 * (-(9.82)))
	pos_player.y = pos_player.y + self.velocity.y * dt

	if self.dead == true then
		go.set_position(pos_player) -- tombstone still affected by gravity
		return
	end
	
	-- gamepad input
	pos_player.x = pos_player.x + self.gp.stick_values.stick_left.x * dt * self.player_speed
	go.set_position(pos_player)

	local pos_cross = go.get_position("crosshair")
	
	pos_cross.x = pos_cross.x + self.gp.stick_values.stick_right.x * dt * self.crosshair_speed
	pos_cross.y = pos_cross.y + self.gp.stick_values.stick_right.y * dt * self.crosshair_speed
	if vmath.length(pos_cross) > 350 then
		pos_cross = vmath.normalize(pos_cross) * 350
	end

	go.set_position(pos_cross, "crosshair")

	-- always face in aim direction
	sprite.set_hflip("#sprite", pos_cross.x > 0) -- player
	if pos_cross.x < 0 and self.weapon_flipped == false then
		self.weapon_flipped = true
		sprite.set_vflip("weapon_local#sprite", true) -- weapon
	elseif pos_cross.x > 0 and self.weapon_flipped == true then
		self.weapon_flipped = false
		sprite.set_vflip("weapon_local#sprite", false)
	end

	-- change animation?
	local anim = "idle"
	if math.abs(self.gp.stick_values.stick_left.x) > 0 then
		anim = "run"
	end
	if math.abs(self.velocity.y) > 0 then
		anim = "jump"
	end
	set_anim(self, anim)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and message.distance > 0 then
		local proj = vmath.project(self.correction_physics, message.normal * message.distance)

		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (message.distance - message.distance * proj) * message.normal
			-- Apply compensation
			
			if message.normal.y > 0 then -- no wall jumps!
				self.is_jumping = false
			end
			local comp = (message.distance - message.distance * proj) * message.normal
			local new_pos = go.get_position() + comp
			self.correction_physics = self.correction_physics + comp
			go.set_position(new_pos)
			self.velocity.x = self.velocity.x - self.velocity.x * math.abs(message.normal.x)
			self.velocity.y = self.velocity.y - self.velocity.y * math.abs(message.normal.y)
			self.velocity.z = self.velocity.z - self.velocity.z * math.abs(message.normal.z)
		end

		if message.other_group == hash("bullet") then
			local damage = go.get(msg.url(nil, message.other_id, "bullet"), hash("damage")) or 1
			print("DAMAGE: " .. tostring(damage))
			take_damage(self, damage)
		end
	end
end

local function anim_tombstone_skip(self)
	local function anim(self, target, property, init_val, distance)
		go.animate(target, property, go.PLAYBACK_ONCE_FORWARD, init_val + distance, go.EASING_LINEAR, 0.2, 0, function(self)
			timer.delay(0.5, false, function(self)
				self.tombstone_skip = false
			end)
		end)
	end
	local dir = 1
	if self.gp.stick_values.stick_left.x < 0 then dir = -1 end
	local pos = go.get_position("player")
	--anim(self, "tombstone", "position.x", pos.x, dir*100)
	anim(self, "player", "position.x", pos.x, dir*100)
	anim(self, "player", "position.y", pos.y, 20)
end

function on_input(self, action_id, action)
	-- gamepad

	local function fire()
		local now = socket.gettime()
		if not self.last_bullet or (now - self.last_bullet) >= self.bullet_interval then
			if self.bullets_left > 0 then
				-- add weapon spread to angle
				local aim_vec = go.get_world_position("crosshair") - go.get_world_position("weapon")--go.get_world_position()
				local angle = -math.atan2(aim_vec.x, aim_vec.y)
				local spread_rad = self.weapon.spread * math.pi / 180
				local spread_rand = (math.random() * 2 - 1) * spread_rad
				angle = angle + spread_rand
				local weapon_angle_spread = vmath.quat_rotation_z(angle)
				self.weapon.fire_bullet(self, weapon_angle_spread)
				self.bullets_left = self.bullets_left - 1
				self.bullets_fired_in_burts = self.bullets_fired_in_burts + 1
				--update_weapon_text(self)
				--else
				--sounds.no_ammo()
			end
			self.last_bullet = now
		end
	end
	
	if action.gamepad ~= nil and action.gamepad == self.gamepad_id then
		label.set_text("#label", "Health: " .. self.health)
		self.gp = gamepads.on_input(self, action_id, action, self.gp)

		if self.dead == true and self.tombstone_skip == false and math.abs(self.gp.stick_values.stick_left.x) > 0 then
			-- skip the tombstone in given direction
			self.tombstone_skip = true
			anim_tombstone_skip(self)
		end

		------ Handle gamepad state
		-- jump!
		if self.gp.pad_values.right.down == 1 and action.pressed and self.is_jumping == false and self.dead == false then
			self.is_jumping = true
			self.velocity.y = self.velocity.y + self.player_jump_speed
		end
		-- fire!
		if self.gp.trigger_values.trigger_right > 0 and self.dead == false then
			fire()
		end
		-- aim
		local aim_vec = go.get_world_position("crosshair") - go.get_world_position()
		local angle = -math.atan2(aim_vec.x, aim_vec.y) + 3.14159/2
		local quat = vmath.quat_rotation_z(angle)
		self.weapon_angle = quat
		go.set_rotation(self.weapon_angle, "weapon")
	end

	-- keyboard (for debug)
	if action_id == hash("KEY_SPACE") and action.pressed and self.is_jumping == false and self.dead == false then
		self.is_jumping = true
		self.velocity.y = self.velocity.y + self.player_jump_speed
	elseif action_id == hash("KEY_A") then
		if action.pressed then
			self.gp.stick_values.stick_left.x = -1
		elseif action.released then
			self.gp.stick_values.stick_left.x = 0
		end
	elseif action_id == hash("KEY_D") then
		if action.pressed then
			self.gp.stick_values.stick_left.x = 1
		elseif action.released then
			self.gp.stick_values.stick_left.x = 0
		end
	elseif action_id == hash("KEY_W") then
		if action.pressed then
			self.gp.stick_values.stick_left.y = 1
		elseif action.released then
			self.gp.stick_values.stick_left.y = 0
		end
	elseif action_id == hash("KEY_S") then
		if action.pressed then
			self.gp.stick_values.stick_left.y = -1
		elseif action.released then
			self.gp.stick_values.stick_left.y = 0
		end
	elseif action_id == hash("KEY_RSHIFT") and action.pressed then
		self.health = 0
		player_dead(self)
	elseif action_id == hash("MB_LEFT") and self.dead == false then
		fire()
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
