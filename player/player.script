local gp = {} --gamepad
local kb = {} --keyboard

go.property("crosshair_speed", 1100)
go.property("player_speed", 700)
go.property("velocity", vmath.vector3(0,0,0))
go.property("gamepad_id", 0)

gp.stick_values = { stick_left = vmath.vector3(0, 0, 0),
					stick_right = vmath.vector3(0, 0, 0)}

gp.pad_values = {right = { left = 0, right = 0, up = 0, down = 0},
left = { left = 0, right = 0, up = 0, down = 0}}

gp.on_input = function(self, action_id, action)
	--local velo = vmath.vector3(0)
	if (action_id == hash("GAMEPAD_LSTICK_LEFT")) then
		gp.stick_values.stick_left.x = -action.value
	elseif (action_id == hash("GAMEPAD_LSTICK_RIGHT")) then
		gp.stick_values.stick_left.x = action.value
	elseif (action_id == hash("GAMEPAD_LSTICK_UP")) then
		gp.stick_values.stick_left.y = action.value
	elseif (action_id == hash("GAMEPAD_LSTICK_DOWN")) then
		gp.stick_values.stick_left.y = -action.value
	end

	if (action_id == hash("GAMEPAD_RSTICK_LEFT")) then
		gp.stick_values.stick_right.x = -action.value
	elseif (action_id == hash("GAMEPAD_RSTICK_RIGHT")) then
		gp.stick_values.stick_right.x = action.value
	elseif (action_id == hash("GAMEPAD_RSTICK_UP")) then
		gp.stick_values.stick_right.y = action.value
	elseif (action_id == hash("GAMEPAD_RSTICK_DOWN")) then
		gp.stick_values.stick_right.y = -action.value
	end

	--[[velo.x = gp.stick_values.stick_left.x
	velo.y = gp.stick_values.stick_left.y
	return velo--]]
end

function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	local pos_player = go.get_position()
	
	-- update position (gravity etc.)
	--self.velocity.y = self.velocity.y + (4 * (-9.82))
	--pos_player.y = pos_player.y + self.velocity.y * dt
	
	-- gamepad input
	pos_player.x = pos_player.x + gp.stick_values.stick_left.x * dt * self.player_speed
	pos_player.y = pos_player.y + gp.stick_values.stick_left.y * dt * self.player_speed
	go.set_position(pos_player)

	local pos_cross = go.get_position("crosshair")
	-- Flipped axes!?
	pos_cross.x = pos_cross.x + gp.stick_values.stick_right.x * dt * self.crosshair_speed
	pos_cross.y = pos_cross.y + gp.stick_values.stick_right.y * dt * self.crosshair_speed
	go.set_position(pos_cross, "crosshair")
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id ~= nil then
		print(action_id, action.value)
	end

	-- gamepad
	if action.gamepad ~= nil then--and action.gamepad == self.gamepad_id then
		--pprint(action)
		gp.on_input(self, action_id, action)
	end

	-- keyboard
	if action_id == hash("KEY_SPACE") and action.pressed then
		pprint("JUMP!")
		self.velocity.y = self.velocity.y + 1000
	elseif action_id == hash("KEY_A") then
		if action.pressed then
			gp.stick_values.stick_left.x = -1
		elseif action.released then
			gp.stick_values.stick_left.x = 0
		end
	elseif action_id == hash("KEY_D") then
		if action.pressed then
			gp.stick_values.stick_left.x = 1
		elseif action.released then
			gp.stick_values.stick_left.x = 0
		end
	elseif action_id == hash("KEY_W") then
		if action.pressed then
			gp.stick_values.stick_left.y = 1
		elseif action.released then
			gp.stick_values.stick_left.y = 0
		end
	elseif action_id == hash("KEY_S") then
		if action.pressed then
			gp.stick_values.stick_left.y = -1
		elseif action.released then
			gp.stick_values.stick_left.y = 0
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
