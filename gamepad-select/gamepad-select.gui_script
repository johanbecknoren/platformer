local rendercam = require "rendercam.rendercam"
local gamepads = require("input.gamepads")

local gp_count = 0
local gp_ready_count = 0

local cross_speed = 25
local live_gamepads = {}

local timer_start_game = nil

local take_input = true

local player_tints = {}
player_tints[1] = vmath.vector4(1,0,0,1) -- red
player_tints[2] = vmath.vector4(0,1,0,1) -- green
player_tints[3] = vmath.vector4(0,0,1,1) -- blue
player_tints[4] = vmath.vector4(1,1,0,1) -- yellow

local node_positions ={}
node_positions[1] = vmath.vector3(0.25,0.75,0)
node_positions[2] = vmath.vector3(0.75,0.75,0)
node_positions[3] = vmath.vector3(0.25,0.25,1)
node_positions[4] = vmath.vector3(0.75,0.25,0)

local function add_gamepad(self, gamepad_id)
	local w = rendercam.window.x
	local h = rendercam.window.y
	
	local node_pos = vmath.vector3(node_positions[gp_count+1].x * w , node_positions[gp_count+1].y * h, 0)

	local node_controller = gui.clone(self.template_controller)
	local node_lstick = gui.clone(self.template_lstick)
	local node_rstick = gui.clone(self.template_rstick)
	local node_cross = gui.clone(self.template_cross)
	local node_ready = gui.clone(self.template_ready)

	live_gamepads[gamepad_id] = {}
	live_gamepads[gamepad_id]["gp_counter"] = gp_count
	live_gamepads[gamepad_id]["gp"] = gamepads.init_gamepad()
	live_gamepads[gamepad_id]["controller"] = node_controller
	live_gamepads[gamepad_id]["lstick"] = node_lstick
	live_gamepads[gamepad_id]["rstick"] = node_rstick
	live_gamepads[gamepad_id]["cross"] = node_cross
	live_gamepads[gamepad_id]["ready"] = node_ready
	live_gamepads[gamepad_id]["ready_state"] = false
	gui.set_parent(node_lstick, node_controller)
	gui.set_parent(node_rstick, node_controller)
	gui.set_parent(node_ready, node_controller)
	
	gui.set_position(node_cross, node_pos)

	gui.set_position(node_controller, node_pos)
	gui.set_color(node_controller, player_tints[gp_count+1])
	gui.set_color(node_cross, player_tints[gp_count+1])
	gui.set_enabled(node_controller, true)
	gui.set_enabled(node_lstick, true)
	gui.set_enabled(node_rstick, true)
	gui.set_enabled(node_cross, true)

	live_gamepads[gamepad_id]["lstick_init_pos"] = gui.get_position(node_lstick)
	live_gamepads[gamepad_id]["rstick_init_pos"] = gui.get_position(node_rstick)

	gp_count = gp_count + 1
end


function init(self)
	msg.post(".", "acquire_input_focus")
	self.node_ready = gui.get_node("ready_btn")
	self.template_controller = gui.get_node("template/controller")
	self.template_lstick = gui.get_node("template/lstick")
	self.template_rstick = gui.get_node("template/rstick")
	self.template_cross = gui.get_node("template/cross")
	self.template_ready = gui.get_node("template/ready")
	gui.set_enabled(self.template_controller, false)
	gui.set_enabled(self.template_lstick, false)
	gui.set_enabled(self.template_rstick, false)
	gui.set_enabled(self.template_cross, false)
	gui.set_enabled(self.template_ready, false)

	--gp = gamepads.init_gamepad(gp)
	--for debugging controller positions
	--[[add_gamepad(self, 0)
	add_gamepad(self, 1)
	add_gamepad(self, 2)
	add_gamepad(self, 3)--]]
	
end

local function start_game(self, _, _)
	pprint("START GAME!")
	take_input = false
	-- trim live_gamepads table and pass as payload to loader, to pass on to level collection
	-- keep gamepad id and gamepad input struct
	for gamepad_id,v in pairs(live_gamepads) do
		live_gamepads[gamepad_id]["gp_counter"] = nil
		--live_gamepads[gamepad_id]["gp"] = gamepads.init_gamepad()
		live_gamepads[gamepad_id]["controller"] = nil
		live_gamepads[gamepad_id]["lstick"] = nil
		live_gamepads[gamepad_id]["rstick"] = nil
		live_gamepads[gamepad_id]["cross"] = nil
		live_gamepads[gamepad_id]["ready"] = nil
		live_gamepads[gamepad_id]["ready_state"] = nil
		live_gamepads[gamepad_id]["lstick_init_pos"] = nil
		live_gamepads[gamepad_id]["rstick_init_pos"] = nil
	end

	msg.post("main:/loader", "start_game", {live_gamepads = live_gamepads})
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function update(self, dt)
	if take_input == true then
		for gamepad_id,v in pairs(live_gamepads) do
			local gp = live_gamepads[gamepad_id]["gp"]
			local lstick = live_gamepads[gamepad_id]["lstick"]
			local rstick = live_gamepads[gamepad_id]["rstick"]
			local lstick_init_pos = live_gamepads[gamepad_id]["lstick_init_pos"]
			local rstick_init_pos = live_gamepads[gamepad_id]["rstick_init_pos"]
			
			local stick_rad = 13
			local lpos = vmath.vector3(0)
			local rpos = vmath.vector3(0)
			lpos.x = gp.stick_values.stick_left.x * stick_rad + lstick_init_pos.x
			lpos.y = gp.stick_values.stick_left.y * stick_rad + lstick_init_pos.y
			rpos.x = gp.stick_values.stick_right.x * stick_rad + rstick_init_pos.x
			rpos.y = gp.stick_values.stick_right.y * stick_rad + rstick_init_pos.y

			local cross = live_gamepads[gamepad_id]["cross"]
			local cross_pos = gui.get_position(cross)
			cross_pos.x = cross_pos.x + gp.stick_values.stick_left.x * cross_speed
			cross_pos.y = cross_pos.y + gp.stick_values.stick_left.y * cross_speed

			if cross_pos.x > rendercam.window.x then
				cross_pos.x = rendercam.window.x
			elseif cross_pos.x < 0 then
				cross_pos.x = 0
			end
			if cross_pos.y > rendercam.window.y then
				cross_pos.y = rendercam.window.y
			elseif cross_pos.y < 0 then
				cross_pos.y = 0
			end
			gui.set_position(cross, cross_pos)
			gui.set_position(lstick, lpos)
			gui.set_position(rstick, rpos)

			if live_gamepads[gamepad_id]["ready_state"] == false and (gp.trigger_values.trigger_right == 1 or gp.pad_values.right.down == 1) then
				if gui.pick_node(self.node_ready, cross_pos.x, cross_pos.y) == true then
					live_gamepads[gamepad_id]["ready_state"] = true
					gui.set_enabled(live_gamepads[gamepad_id]["ready"], true)
					print("gamepad id: " .. tostring(gamepad_id) .. " is ready!")

					gp_ready_count = gp_ready_count + 1
					if gp_ready_count == gp_count then
						-- all players ready, start game!
						timer_start_game = timer.delay(1, false, start_game)
					end
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed and action.gamepad ~= nil and live_gamepads[action.gamepad] == nil and gp_count < 5 then
		add_gamepad(self, action.gamepad)
	end

	if action.gamepad ~= nil and live_gamepads[action.gamepad] ~= nil then
		local gp = live_gamepads[action.gamepad]["gp"]
		gamepads.on_input(self, action_id, action, gp)
	end
end
