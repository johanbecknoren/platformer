local rendercam = require "rendercam.rendercam"
local live_gamepads = {}

local player_tints = {}
player_tints[1] = vmath.vector4(1,0,0,1) -- red
player_tints[2] = vmath.vector4(0,1,0,1) -- green
player_tints[3] = vmath.vector4(0,0,1,1) -- blue
player_tints[4] = vmath.vector4(1,1,0,1) -- yellow

local node_positions ={}
node_positions[1] = vmath.vector3(0.25,0.75,0)
node_positions[2] = vmath.vector3(0.75,0.75,0)
node_positions[3] = vmath.vector3(0.25,0.25,1)
node_positions[4] = vmath.vector3(0.75,0.25,0)

local function add_gamepad(self, gamepad_id)
	local w = rendercam.window.x
	local h = rendercam.window.y
	local gp_count = #live_gamepads
	local node_pos = vmath.vector3(node_positions[gamepad_id+1].x * w , node_positions[gamepad_id+1].y * h, 0)

	local node = nil
	if gp_count == 0 then
		print("First! gamepad_id: ", gamepad_id)
		node = self.inst1
	else
		local node_tree = gui.clone_tree(self.inst1)
		node = node_tree["instance1/controller"]
	end

	live_gamepads[gamepad_id] = node
	gui.set_position(node, node_pos)
	gui.set_color(node, player_tints[gamepad_id+1])
	gui.set_enabled(node, true)
end


function init(self)
	msg.post(".", "acquire_input_focus")
	self.inst1 = gui.get_node("instance1/controller")
	gui.set_enabled(self.inst1, false)
	--[[ for debugging controller positions
	add_gamepad(self, 1)
	add_gamepad(self, 2)
	add_gamepad(self, 3)
	add_gamepad(self, 4)
	--]]
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action.gamepad ~= nil and live_gamepads[action.gamepad] == nil and #live_gamepads < 5 then
		add_gamepad(self, action.gamepad)
	end

	if action.gamepad ~= nil then
		
	end
end
